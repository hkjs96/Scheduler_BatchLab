<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- 컨테이너가 아니라 콰츠 프레임워크가 관리 하는 객체가 된다. -> 주입받을 수 없다.(한계점) -->
<!-- 컨테이너에 등록하지 않았기 떄문에 싱글턴으로 운영할지 아닐지 관리하지 못했다. -->
<!-- 	<bean id="jobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean" -->
<!-- 		p:jobClass="kr.or.ddit.quartz.PrintNumberQuartzJobBean" -->
<!-- 	> -->
<!-- 		<property name="jobDataAsMap"> -->
<!-- 			<map> -->
<!-- 				<entry key="today"> -->
<!-- 					<bean class="java.util.Date" /> -->
<!-- 				</entry> -->
<!-- 			</map> -->
<!-- 		</property> -->
<!-- 	</bean> -->
<!-- 한번의 작업이 하나의 객체를 의미 -->

<!-- 한번의 작업이 하나의 메서드 단위로 묶어야한다. -->
<!-- 위와의 차이점 빈으로 등록시 스프링 DI 컨테이너가 생명주기 관리, 위는 DI 컨테이너의 영향을 벗어남, 또한 기본 값이어서 싱글턴으로 적용 -->
	<bean id="printNumberJob" class="kr.or.ddit.quartz.PrintNumberJob" />

	<bean id="JobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean" 
		p:targetObject-ref="printNumberJob"
		p:targetMethod="printNumber"
	/>
	
	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"
		p:jobDetail-ref="jobDetail"
		p:startDelay="0"
		p:repeatInterval="1000"
		p:repeatCount="10"
	/>
	<!-- p:repeatCount 작업의 횟수를 제한 콰츠의 기능 Quartz -->
	
	<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="globalJobListeners">
			<array>
				<bean class="kr.or.ddit.quartz.CustomJobListener" />
			</array>
		</property>
		<property name="triggers">
			<array>
				<ref bean="simpleTrigger" />
			</array>
		</property>
	</bean>

</beans>
